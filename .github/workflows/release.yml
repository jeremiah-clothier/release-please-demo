on:
  push:
    branches:
      - main

# Modify the default permissions granted to GITHUB_TOKEN
# see: https://docs.github.com/en/actions/using-jobs/assigning-permissions-to-jobs
permissions:
  contents: write
  pull-requests: write
  packages: write

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    steps:
      - uses: google-github-actions/release-please-action@v3
        id: release
        with:
          command: manifest
          default-branch: main

      - name: ‚¨áÔ∏è Checkout repo (release-please PR branch)
        id: checkout_release_please_branch
        uses: actions/checkout@v3
        continue-on-error: true
        with:
          ref: release-please--branches--main

      - name: ‚¨áÔ∏è Checkout repo (default branch)
        if: ${{ steps.release.outputs.releases_created }}
        uses: actions/checkout@v3

      - name: üòª Setup node
        uses: actions/setup-node@v3
        with:
          node-version-file: '.node-version'
          registry-url: 'https://npm.pkg.github.com/'

      - name: üì• Download deps
        uses: bahmutov/npm-install@v1
        env:
          NODE_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}

      # This step only executes when a Release PR has been created or updated.
      # It will run the `npm install` command and commit any changes in the
      # package-lock.json file. Ideally, release-please would update this file itself
      # and we could remove conditional logic from the release workflow
      - name: Update package-lock.json
        if: ${{ steps.checkout_release_please_branch.conclusion == 'success' }}
        run: |
          npm install
          git config user.name github-actions[bot]
          git config user.email github-actions[bot]@users.noreply.github.com
          git add package-lock.json
          git diff-index --quiet HEAD || git commit -m "chore: update package-lock.json" -m "running npm install in github release workflow to update package-lock.json"
          git push


      # Release Please has already incremented versions and published tags, so we just
      # need to publish all unpublished versions to NPM here
      - name: Publish package
        if: ${{ steps.release.outputs.releases_created }}
        run: npm publish --workspaces --dry-run
        env:
          NODE_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}